<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="com.douzone.mapper.owner">

    <!-- 로그인시 사용 승인완료, 해지신청대기중일 때만 로그인가능-->
    <select id="findBySNum" resultType="com.douzone.final_backend.Bean.OwnerBean">
        select *
        from owner
        where o_sNumber = #{o_sNumber}
          and o_approval in (1, 3)
    </select>

    <!-- 해당 사업자 번호가 등록하는지 확인-->
    <select id="existsBySNum" resultType="boolean">
        select count(*)
        from owner
        where o_sNumber = #{o_sNumber}
    </select>

    <!-- 입점 신청시 owner 추가-->
    <insert id="insertOwner" parameterType="com.douzone.final_backend.Bean.OwnerBean">
        insert into owner(o_sNumber, o_pw, o_phone, o_name, o_cellPhone, o_address, o_date, o_time1, o_time2, o_image,
                          o_longitude, o_latitude)
        values (#{o_sNumber}, #{o_pw}, #{o_phone}, #{o_name}, #{o_cellPhone}, #{o_address}, #{o_date}, #{o_time1},
                #{o_time2},
                #{o_image}, #{o_longitude}, #{o_latitude})
    </insert>
    <!--  시큐리티 인증할 때 사용  -->
    <select id="findByOwner" resultType="com.douzone.final_backend.DTO.OwnerDTO">
        select *
        from owner
        where o_sNumber = #{id}
    </select>
    <!-- 상품 등록-->
    <insert id="addGoods" parameterType="com.douzone.final_backend.Bean.GoodsBean">
        insert into goods(g_owner, g_name, g_count, g_price, g_discount, g_detail, g_image, g_expireDate, g_category)
        values (#{g_owner}, #{g_name}, #{g_count}, #{g_price}, #{g_discount}, #{g_detail}, #{g_image}, #{g_expireDate},
                #{g_category})

    </insert>
    <!-- 등록되어있는 상품 수정-->
    <update id="updateGoods" parameterType="com.douzone.final_backend.Bean.GoodsBean">
        update goods
        set g_owner      = #{g_owner},
            g_name       = #{g_name},
            g_price      = #{g_price},
            g_discount   = #{g_discount},
            g_detail     = #{g_detail},
            g_image      = #{g_image},
            g_expireDate = #{g_expireDate},
            g_category   = #{g_category},
            g_count      = #{g_count}
        where g_code = #{g_code}
    </update>

    <!--  해당 가게의 상품 리스트  -->
    <select id="goodsList" resultType="com.douzone.final_backend.Bean.GoodsBean">
        select *
        from goods
        where g_owner = #{o_sNumber}
        order by g_status
        LIMIT #{startIndex},10
    </select>


    <!-- 예약 신청 승인 -->
    <update id="resOK" parameterType="com.douzone.final_backend.DTO.ReserveDTO">
        update reserve
        set r_status = 1
        where r_code = #{r_code}
    </update>

    <!-- 예약 거절 -->
    <!-- 1. 수량 더하기 -->
    <update id="resNoCount" parameterType="com.douzone.final_backend.DTO.ReserveDTO">
        update goods
        set g_count = g_count + #{r_count}
        where g_code = #{r_g_code}
    </update>
    <!-- 2. 예약 상태 2 거절로 변경 -->
    <update id="resNo" parameterType="com.douzone.final_backend.DTO.ReserveDTO">
        update reserve
        set r_status = 2
        where r_code = #{r_code}
    </update>
    <!-- 3. 상품 상태 수량이랑 기존 상태 확인후 판매중0 으로 변경 -->
    <update id="reNoSt" parameterType="com.douzone.final_backend.DTO.ReserveDTO">
        update goods
        set g_status = if(g_count != 0 and g_status != 2, 0, g_status)
        where g_code = #{r_g_code}
    </update>

    <!-- 판매 완료 r_status = 3 으로 변경-->
    <update id="resSu" parameterType="com.douzone.final_backend.DTO.ReserveDTO">
        update reserve
        set r_status   = 3,
            r_lastTime = now()
        where r_code = #{r_code}
    </update>
    <update id="point" parameterType="com.douzone.final_backend.DTO.ReserveDTO">
        update user
        set u_point = u_point + #{r_pay} * 0.1
        where u_id = #{r_u_id}
    </update>

    <!-- 노쇼 -->
    <!-- 1. goods 테이블 수량 다시 더하기 -->
    <!-- 예약 거절꺼 재사용 -->
    <!-- 2. reserve 테이블 status = 4 -->
    <update id="reseNoShowStatus" parameterType="com.douzone.final_backend.DTO.ReserveDTO">
        update reserve
        set r_status = 4
        where r_code = #{r_code}
    </update>

    <!-- 3. goods 상태 상품수가 0이 아니고 판매 중지 2 된 상품이 아니면 판매중으로 변경 -->
    <!-- 예약 거절꺼 재사용 -->
    <!--    <update id="resNSSt" parameterType="com.douzone.final_backend.DTO.ReserveDTO">-->
    <!--        update goods-->
    <!--        set g_status = if(g_count != 0 and g_status != 2, 0, g_status)-->
    <!--        where g_code = #{r_g_code}-->
    <!--    </update>-->
    <!-- 4. u_id noShow 카운트 1 증가 -->
    <update id="resNoShowCount" parameterType="com.douzone.final_backend.DTO.ReserveDTO">
        update user
        set u_noShowCnt = u_noShowCnt + 1
        where u_id = #{r_u_id}
    </update>
    <!-- 5. 만약 user noshowcount 5이상이면 블랙리스트 -->
    <update id="noShowCheck">
        update user
        set u_status = if(u_noShowCnt >= 5, 2, u_status)
        where u_id = #{r_u_id}
    </update>

    <!--  스케줄러에서 상품 가져올 때 사용  -->
    <select id="allGoodsList" resultType="com.douzone.final_backend.Bean.GoodsBean">
        select *
        from goods
    </select>
    <!-- 스케줄러에서  상품 판매 중지-->
    <update id="changeStatus" parameterType="int">
        update goods
        set g_status = 2
        where g_code = #{g_code}
    </update>
    <!-- 예약 번호로 예약정보 부르기 -->
    <select id="reserveOne" resultType="com.douzone.final_backend.Bean.ReserveBean">
        select *
        from reserve
        where r_code = #{r_code};
    </select>

    <!-- 상품 판매 중지 신청 -->
    <update id="deleteGoods" parameterType="int">
        update goods
        set g_status = 1
        where g_code = #{g_code}
    </update>

    <!-- 본인 가게 예약 리스트 -->
    <select id="reserveList" resultType="com.douzone.final_backend.Bean.ReserveBean">
        select *
        from reserve
        where r_owner = #{g_owner}
        order by r_status
        LIMIT #{startIndex},10
    </select>

    <!-- 탄다오너 어플 예약목록 보기 -->
    <select id="reserveListAll" resultType="com.douzone.final_backend.Bean.ReserveBean">
        select *
        from reserve
        where r_owner = #{g_owner}
          and r_status in (0, 1)
        order by r_status
        limit 100;
    </select>

    <!-- g_code로 물건 정보 조회 -->
    <select id="goodsData" resultType="com.douzone.final_backend.Bean.GoodsBean">
        select *
        from goods
        where g_code = #{r_g_code}
    </select>

    <!-- 예약 검색 예약 상태 선택 시 -->
    <select id="searchReserve" resultType="com.douzone.final_backend.DTO.ReserveDTO">
        select r.r_code,
               r.r_u_id,
               r.r_count,
               r.r_firstTime,
               r.r_g_code,
               r.r_status,
               r.r_customOrder,
               r.r_firstDate,
               r.r_pay,
               g.g_name,
               g.g_price,
               g.g_discount,
               g.g_expireDate,
               g.g_category,
               g.g_status,
               g.g_count
        from (select * from reserve order by r_status) as r
                 join goods as g
        where g.g_category LIKE '%${g_category}%'
          and r.r_status = #{r_status}
          and g.g_name LIKE '%${searchInput}%'
          and r.r_owner = #{r_owner}
          and g_code = r.r_g_code
        group by r.r_code
        LIMIT #{startIndex},10;
    </select>
    <!-- 예약 검색 상태 선택 안했을 때  -->
    <select id="searchReserveStatus" resultType="com.douzone.final_backend.DTO.ReserveDTO">
        select *
        from (select r.r_code,
                     r.r_u_id,
                     r.r_count,
                     r.r_firstTime,
                     r.r_g_code,
                     r.r_status,
                     r.r_customOrder,
                     r.r_firstDate,
                     r.r_pay,
                     g.g_name,
                     g.g_price,
                     g.g_discount,
                     g.g_expireDate,
                     g.g_category,
                     g.g_status,
                     g.g_count
              from reserve as r
                       join goods as g
              where g.g_category LIKE '%${g_category}%'
                and g.g_name LIKE '%${searchInput}%'
                and r.r_owner = #{r_owner}
                and g_code = r.r_g_code
              order by r.r_status
              limit 1000) as re
        group by re.r_code
        LIMIT #{startIndex},10
    </select>

    <!-- 상품검색에서 상태 선택 안했을 때 -->
    <select id="search" resultType="com.douzone.final_backend.DTO.GoodsDTO">
        select *
        from goods
        where g_category LIKE '%${g_category}%'
          AND g_name LIKE '%${searchInput}%'
          AND g_owner = #{g_owner}
        order by g_status
        LIMIT #{startIndex},10
    </select>

    <!-- 상품검색에서 상태 선택 했을 때 -->
    <select id="searchStatus" resultType="com.douzone.final_backend.DTO.GoodsDTO">
        select *
        from goods
        where g_category LIKE '%${g_category}%'
          AND g_name LIKE '%${searchInput}%'
          AND g_status = #{g_status}
          AND g_owner = #{g_owner}
        LIMIT #{startIndex},10
    </select>


    <!-- 해당 가게 총 수익 -->
    <select id="total" resultType="int">
        select ifnull(sum(r_pay), 0)
        from reserve
        where r_status = 3
          and r_owner = #{o_sNumber}
    </select>
    <!-- 해당가게 총 등록 상품 수 -->
    <select id="goods" resultType="int">
        select count(*)
        from goods
        where g_owner = #{o_sNumber}
    </select>
    <!-- 해당 가게 예약테이블 카운트 -->
    <select id="reserve" resultType="int">
        select count(*)
        from reserve
        where r_owner = #{o_sNumber}
          and r_status = 1
    </select>

    <!-- 판매 중지 됐을 때 예약중인거 예약 거절로 변경 -->
    <update id="deleteStatus" parameterType="int">
        update reserve
        set r_status = 2
        where r_g_code = #{g_code}
    </update>

    <!-- 이번달 수익 -->
    <!-- 총 구매자 -->
    <!-- 총 수익 -->
    <select id="getOwner" resultType="com.douzone.final_backend.DTO.OwnerPageDTO">
        select d.o_name, total, b.monTotal, c.cnt as buyTotal
        from (select ifnull(sum(r_pay), 0) as total from reserve where r_owner = #{o_sNumber} and r_status = 3) as a,
             (select ifnull(sum(r_pay), 0) as monTotal
              from reserve
              where r_owner = #{o_sNumber}
                and r_status = 3
                and date_format(r_lastTime, '%Y-%m') = date_format(now(), '%Y-%m')) as b,
             (select count(*) as cnt from reserve where r_owner = #{o_sNumber} and r_status = 3) as c,
             (select o_name from owner where o_sNumber = #{o_sNumber}) as d
    </select>

    <!-- 일별 수익 -->
    <select id="getDay" resultType="com.douzone.final_backend.DTO.SaleDTO">


        set @N := (select date_format(last_day(str_to_date(${total}${monTotal}, '%Y%m')), '%d') as a);

        <![CDATA[
        select a.r as date, ifnull(b.cnt, 0) as sum
        from (with recursive c as (select 1 as r union all select r + 1 from c where r < @N) select r from c) as a
                 left join (select date_format(r_lastTime, '%d') as day, sum(r_pay) as cnt
                            from reserve
                            where month(r_lastTime) = ${monTotal}
                              and year(r_lastTime) = ${total}
                              and r_status = 3
                              and r_owner = '${o_name}'
                            group by day) as b
                           on a.r = b.day
        ]]>
    </select>

    <!-- 월별 수익 -->
    <select id="getMon" resultType="com.douzone.final_backend.DTO.SaleDTO">
        select a.r as date, ifnull(b.cnt, 0) as sum
        from <![CDATA[(with recursive c as (select 1 as r union all select r + 1 from c where r < 12) select r from c)]]> as a
                 left join (select month(r_lastTime) as mon, sum(r_pay) as cnt
                            from reserve
                            where r_status = 3
                              and r_owner = #{o_name}
                              and year(r_lastTime) = #{total}
                            group by mon) as b
                           on a.r = b.mon;
    </select>
    <!-- 연도별 수익-->
    <select id="getYear" resultType="com.douzone.final_backend.DTO.SaleDTO">
        select year(r_lastTime) as date, ifnull(sum(r_pay), 0) as sum
        from reserve
        where r_owner = #{o_sNumber}
          and r_status = 3
        group by date
        order by date;
    </select>


    <!--    예약시 상품고유번호의 사업자번호와 같은 토큰 여러개를 검색해서 반환-->
    <select id="getPushTokenList" resultType="String">
        select distinct token
        from firebase_owner_push_token as f
                 join reserve as r on f.g_owner_fk = r.r_owner
        where r_g_code = #{r_g_code};
    </select>

    <select id="tokenDupChk" resultType="int">
        select count(*)
        from firebase_owner_push_token
        where token = #{token}
    </select>

    <insert id="insertPushToken" parameterType="com.douzone.final_backend.DTO.PushTokenDTO">
        insert into firebase_owner_push_token (g_owner_fk, token)
        VALUES (#{g_owner_fk}, #{token})
    </insert>


    <!-- 예약시간대별 count -->
    <select id="getTime" resultType="com.douzone.final_backend.DTO.SaleDTO">
        select a.hour as tal, ifnull(b.cnt, 0) as sum
        from (select @a := @a + 1 as hour
              from owner,
                   (select @a := -1 from owner) nn
              limit 24) a
                 left join
             (select hour(r_firstTime) as hour, count(*) as cnt
              from reserve
              where r_status = 3
                and r_owner = #{r_owner}
              group by hour) as b
             on a.hour = b.hour;
    </select>

    <!-- 성별 구매 비율 -->
    <select id="getGender" resultType="com.douzone.final_backend.DTO.SaleDTO">
        select a.gender as date, ifnull(b.cnt, 0) as sum
        from (select *
              from (select '남성' as gender
                    union
                    select '여성') as b) as a
                 left join (select u.u_gender as gender, count(*) as cnt
                            from reserve as r
                                     join user as u
                                          on r.r_status = 3 and r.r_owner = #{r_owner} and r.r_u_id = u.u_id
                            group by gender) as b
                           on a.gender = b.gender
        group by date
    </select>

    <!-- 연령대 구매 비율 -->
    <select id="getAge" resultType="com.douzone.final_backend.DTO.SaleDTO">
        select b.age as date, ifnull(c.cnt, 0) as sum
        from (select *
              from (select '10대' as age
                    union
                    select '20대'
                    union
                    select '30대'
                    union
                    select '40대'
                    union
                    select '50대') as a
             ) as b
                 left join (select u.u_age as a, count(*) cnt
                            from reserve as r
                                     join user as u
                                          on r.r_status = 3 and r.r_owner = #{r_owner} and r.r_u_id = u.u_id
                            group by a) as c
                           on substr(age, 1, 2) = c.a
        group by age;
    </select>

    <!-- 카테고리별 구매 -->
    <select id="getCategorySale" resultType="com.douzone.final_backend.DTO.SaleDTO">
        select g_category as date, count(*) as sum
        from goods as g
                 join reserve as r on g.g_code = r.r_g_code and r_status = 3 and r_owner = #{r_owner}
        group by g_category;

    </select>

    <!-- 노쇼 건수와 노쇼발생 비율-->
    <select id="getNoShow" resultType="com.douzone.final_backend.DTO.SaleDTO">
        select count(case when r_status = 4 then 1 end) as sum,
               round(
                               count(case when r_status = 4 then 1 end) /
                               count(case when r_status in (3, 4, 5) then 1 end) *
                               100
                   )
                                                        as tal
        from reserve
        where r_owner = #{owner}
    </select>

    <!--취소 건수와 발생 비율 -->
    <select id="getCancel" resultType="com.douzone.final_backend.DTO.SaleDTO">
        select count(case when r_status = 5 then 1 end) as sum,
               round(
                               count(case when r_status = 5 then 1 end) /
                               count(case when r_status in (3, 4, 5) then 1 end) *
                               100
                   )
                                                        as tal
        from reserve
        where r_owner = #{owner}
    </select>
    <!--유통기한 경과 건수와 발생 비율 -->
    <select id="getOver" resultType="com.douzone.final_backend.DTO.SaleDTO">
        <![CDATA[
        select count(case when g_expireDate < date_format(now(), '%Y-%m-%d') and g_status = 2 then 1 end) as sum,
               round(count(case when g_expireDate < date_format(now(), '%Y-%m-%d') and g_status = 2 then 1 end) /
                     count(*) *
                     100)                                                                                 as tal
         ]]>
        from goods
        where g_owner = #{owner}
    </select>

    <!--  입점 해지 신청  -->
    <update id="ownerExit" parameterType="String">
        update owner
        set o_approval = 3
        where o_sNumber = #{o_sNumber}
    </update>

    <!-- 해당 상품의 판매 완료 갯수-->
    <select id="getGoodsReserve" resultType="int">
        select ifnull(sum(r_count), 0)
        from reserve
        where r_g_code = #{g_code}
          and r_status = 3
    </select>
</mapper>
